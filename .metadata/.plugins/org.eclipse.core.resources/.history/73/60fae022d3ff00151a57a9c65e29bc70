from google.appengine.ext import ndb
from google.appengine.ext import db

from model.project import *
import logging
import ast
from __builtin__ import classmethod

class User(ndb.Model):
    first_name = ndb.StringProperty(required=True)
    last_name = ndb.StringProperty(required=True)
    designation = ndb.StringProperty(required=True)
    email = ndb.StringProperty(required=True)
    project_id = ndb.KeyProperty(repeated=True)
    date = ndb.DateTimeProperty(auto_now_add=True)
    
    '''def set(self,**args):
        if 'key' not in args:
            try:
                if args is not None:
                    for key1, value in args.iteritems():
                        setattr( self, key1, value )                
                key_return= self.put()
                return key_return
            except db.Error:
                return False
        else:
            update_key= args['key']
            update_key1=ndb.Key(urlsafe=update_key)
            user = update_key1.get()
            for key1, value in args.iteritems():
                if key1 != 'key':
                    setattr( user, key1, value )
            user.put()
            return update_key1'''
    
    def set(self,**args):
        user=User()
        if 'key' in args:
            k=args['key'].get(keys_only = True)
            logging.info(k)
            if  is None:
                raise Exception('Key Not Found')
        else:
            for key1, value in args.iteritems():
                setattr( user, key1, value )
            try:
                key_return=user.put()
                return key_return
            except db.Error():
                return "aaaaaa"
            
        
        
    
class Groups(ndb.Model):
    role=ndb.StringProperty(required=True)
    permissions=ndb.KeyProperty(required=True)
    date = ndb.DateTimeProperty(auto_now_add=True)
    
class Permissions(ndb.Model):
    permission = ndb.StringProperty(required=True)
    date = ndb.DateTimeProperty(auto_now_add=True)